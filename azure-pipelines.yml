# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:  
  Solution: 'SpreadsheetLedger.sln'
  AddInProject: 'SpreadsheetLedger.ExcelAddIn\SpreadsheetLedger.ExcelAddIn.csproj'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'  

name: '0.1.0.$(Rev:r)'

steps:

- task: DownloadSecureFile@1
  name: cert
  displayName: 'Download code signing certificate'
  inputs:
    secureFile: 'SpreadsheetLedger.ExcelAddIn_TemporaryKey.pfx'

- task: PowerShell@2
  displayName: 'Install code signing certificate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."
      $pfxpath = '$(cert.secureFilePath)'
      $password = '$(PFXPassword)'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(Solution)'

- task: VersionAssemblies@2
  displayName: 'Patch assembly versions'
  inputs:
    Path: $(Build.SourcesDirectory)
    VersionNumber: $(Build.BuildNumber)
    InjectVersion: False
    FilenamePattern: AssemblyInfo.*
    OutputVersion: OutputedVersion

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(Solution)'    
    platform: '$(BuildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    testSelector: 'testAssemblies' 
    testAssemblyVer2: |
      **\bin\$(BuildConfiguration)\**\*test*.dll
      !**\obj\**
      !**\xunit.runner.visualstudio.testadapter.dll
      !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
    codeCoverageEnabled: True
    runTestsInIsolation: True

- task: VSBuild@1
  displayName: 'Build click-once artifacts'
  inputs:
    solution: '$(AddInProject)'    
    platform: '$(BuildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: >
      /target:publish
      /p:ProductName="General Ledger"
      /p:ApplicationVersion="$(Build.BuildNumber)"
      /p:OutputPath="$(Build.StagingDirectory)\"
      /p:UpdateEnabled=true
      /p:UpdateMode=Foreground
      /p:InstallUrl=https://nick-buhro.github.io/GL/click-once/
      /p:PublishUrl=https://nick-buhro.github.io/GL/click-once/
      /p:UpdateUrl=https://nick-buhro.github.io/GL/click-once/      

- publish: $(Build.StagingDirectory)\app.publish
  displayName: 'Deploy click-once artifacts'
  artifact: publish

- script: git clone https://github.com/nick-buhro/GL.git
  displayName: '[GIT] Clone GitHub Pages repository'
  workingDirectory: $(Build.StagingDirectory)

- script: git checkout master
  displayName: '[GIT] Checkout master branch'
  workingDirectory: '$(Build.StagingDirectory)\GL'

- task: CopyFiles@2
  displayName: 'Add click-once artifacts to the staging'
  inputs:
    sourceFolder: '$(Build.StagingDirectory)\app.publish'
    targetFolder: '$(Build.StagingDirectory)\GL\docs\click-once'
    contents: '**'    

- task: CmdLine@2
  displayName: '[GIT] Commit new files'
  inputs:
    workingDirectory: '$(Build.StagingDirectory)\GL'
    script: |
      git config user.email "n.buhro@gmail.com"
      git config user.name "Nicholas Buhro by Azure Pipelines"
      git add --all
      git commit -m"Pipelines-Bot: Add VSTO Add-in version [$(Build.BuildNumber)]"
 
- script: git push https://$(GitHubPAT)@github.com/nick-buhro/GL.git  master
  displayName: '[GIT] Push changes to remote'
  workingDirectory: '$(Build.StagingDirectory)\GL'
