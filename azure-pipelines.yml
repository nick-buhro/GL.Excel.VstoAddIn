
trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:  
  Solution: 'SpreadsheetLedger.sln'
  AddInProject: 'SpreadsheetLedger.ExcelAddIn\SpreadsheetLedger.ExcelAddIn.csproj'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'

name: '0.2.$(Rev:r)'

steps:

# Install code signing certificate

- task: DownloadSecureFile@1
  name: cert
  displayName: 'Download code signing certificate'
  inputs:
    secureFile: 'SpreadsheetLedger.ExcelAddIn_TemporaryKey.pfx'

- task: PowerShell@2
  displayName: 'Install code signing certificate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Start adding the PFX file to the certificate store."
      $pfxpath = '$(cert.secureFilePath)'
      $password = '$(PFXPassword)'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

# Restore NuGet packages

- task: NuGetToolInstaller@1
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(Solution)'

# Patch versions

- task: VersionAssemblies@2
  displayName: 'Patch assembly versions'
  inputs:
    Path: $(Build.SourcesDirectory)
    VersionNumber: '$(Build.BuildNumber).0'
    InjectVersion: False
    FilenamePattern: AssemblyInfo.*
    OutputVersion: OutputedVersion

# Build

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(Solution)'    
    platform: '$(BuildPlatform)'
    configuration: '$(buildConfiguration)'

# Test

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    testSelector: 'testAssemblies' 
    testAssemblyVer2: |
      **\bin\$(BuildConfiguration)\**\*test*.dll
      !**\obj\**
      !**\xunit.runner.visualstudio.testadapter.dll
      !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
    codeCoverageEnabled: True
    runTestsInIsolation: True

# Publish

- task: VSBuild@1
  displayName: 'Build click-once artifacts'
  inputs:
    solution: '$(AddInProject)'    
    platform: '$(BuildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: >
      /target:publish
      /p:ProductName="General Ledger"
      /p:ApplicationVersion="$(Build.BuildNumber).0"
      /p:OutputPath=$(Build.StagingDirectory)\

#      /p:UpdateEnabled=true
#      /p:UpdateMode=Foreground
#      /p:IsWebBootstrapper=true
#      /p:BootstrapperEnabled=true
#      /p:CreateWebPageOnPublish=true
#      /p:WebPage=index.html
#      /p:InstallUrl=https://nick-buhro.github.io/GL/click-once      
#      /p:UpdateUrl=https://nick-buhro.github.io/GL/click-once


- publish: $(Build.StagingDirectory)\app.publish
  displayName: 'Publish artifacts to Pipelines'
  artifact: publish

### Click-once auto-update doesn't work with self-signed certificate ;(
#
#- task: CmdLine@2
#  displayName: 'Publish artifacts to GitHub Pages'
#  inputs:
#    workingDirectory: '$(Build.StagingDirectory)'
#    script: |
#      git clone https://github.com/nick-buhro/GL.git
#      cd GL
#      git checkout master
#      if not exist $(Build.StagingDirectory)\GL\docs\click-once\ mkdir $(Build.StagingDirectory)\GL\docs\click-once
#      xcopy /s /y $(Build.StagingDirectory)\app.publish\ $(Build.StagingDirectory)\GL\docs\click-once\
#      git config user.email "n.buhro@gmail.com"
#      git config user.name "Nicholas Buhro by Azure Pipelines"
#      git add --all
#      git commit -m"Pipelines-Bot: Add VSTO Add-in version [$(Build.BuildNumber)]"
#      git push https://$(GitHubPAT)@github.com/nick-buhro/GL.git  master
#